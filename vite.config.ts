// Plugins
import vue from "@vitejs/plugin-vue"
import vuetify, { transformAssetUrls } from 'vite-plugin-vuetify'

// Utilities
import { defineConfig, loadEnv } from 'vite'
import dfxJson from "./dfx.json"
import fs from "fs"

// See guide on how to configure Vite at:
// https://vitejs.dev/config/
export default defineConfig((userConfig) => {
  const path = require('path'),
  env = loadEnv(userConfig.mode, process.cwd(), ''),
  isDev = env.DFX_NETWORK !== "ic",
  canisterIds = JSON.parse(fs.readFileSync(isDev ? ".dfx/local/canister_ids.json" : "./canister_ids.json").toString()),

  // Gets the port dfx is running on from dfx.json
  DFX_PORT = dfxJson.networks.local.bind.split(":")[1],

  // List of all aliases for canisters
  // This will allow us to: import { canisterName } from "canisters/canisterName"
  canisterAliases = Object.entries(dfxJson.canisters).reduce(
    (acc, [name, _value]) => {
      // Get the network name, or `local` by default.
      const networkName = env.DFX_NETWORK || "local",
      outputRoot = path.join(__dirname, ".dfx", networkName, "canisters", name)

      return { ...acc, ["~" + name]: path.join(outputRoot, "index" + ".js") }
    }, {},
  ),

  // Generate canister ids, required by the generated canister code in .dfx/local/canisters/*
  // This strange way of JSON.stringifying the value is required by vite
  canisterDefinitions = Object.entries(canisterIds).reduce(
    (acc, [key, val]) => ({
      ...acc,
      [`CANISTER_ID_${key.toUpperCase()}`]: isDev
        ? (val as object)['local']
        : (val as object)['ic'],
    }), {},
  )


  // Generate motoko env file
  const uniqueEnv = {};
  for (let key in env) {
    let upperKey = key.toUpperCase();
    if (upperKey.includes('DFX') || upperKey.includes('CANISTER_ID') || upperKey.includes('VITE'))
      uniqueEnv[upperKey] = env[key];
  }

  let declarations = 'module ENV {\n';
  for (let key in uniqueEnv) declarations += `  public let ${key}: Text = "${uniqueEnv[key]}";\n`;
  declarations += '}';
  fs.writeFile('src/cero_trade_project_backend/env.mo', declarations, () => {});


  return {
    base: env.VITE_BASE_URL,
    plugins: [
      vue({ 
        template: { transformAssetUrls }
      }),
      // https://github.com/vuetifyjs/vuetify-loader/tree/next/packages/vite-plugin
      vuetify({
        autoImport: true,
        styles: { configFile: 'src/cero_trade_project_frontend/assets/styles/settings.scss' }
      }),
    ],
    define: {
      // Here we can define global constants
      // This is required for now because the code generated by dfx relies on process.env being set
      'process.env': {
        BASE_URL: env.VITE_BASE_URL,
        SECURE_STORAGE_NAME_SPACE: env.VITE_SECURE_STORAGE_NAME_SPACE,
        SECURE_STORAGE_KEY: env.VITE_SECURE_STORAGE_KEY,
        E8S_EQUIVALENCE: env.VITE_E8S_EQUIVALENCE,
        CERO_COMISSION: env.VITE_CERO_COMISSION,
        DFX_NETWORK: env.DFX_NETWORK,
        ...canisterDefinitions,
      },
      __VUE_I18N_FULL_INSTALL__: true,
      __VUE_I18N_LEGACY_API__: false,
      __INTLIFY_PROD_DEVTOOLS__: false,
    },
    resolve: {
      alias: {
        // Here we tell Vite the "fake" modules that we want to define
        "vue": path.resolve("./node_modules/vue"),
        '@': path.resolve(__dirname, './src/cero_trade_project_frontend'),
        '@canister': path.resolve(__dirname, './.dfx/local/canisters'),
        ...canisterAliases,
      },
    },
    server: {
      host: true,
      fs: {
        allow: ["."],
      },
      proxy: {
        // This proxies all http requests made to /api to our running dfx instance
        "/api": {
          target: `http://0.0.0.0:${DFX_PORT}`,
          changeOrigin: true,
          rewrite: (path) => path.replace(/^\/api/, "/api"),
        },
      },
    },
  }
})