#!/usr/bin/expect -f

set timeout -1

# Initialize variables
set args [lrange $argv 0 end]
set network "local"
set passphrase ""
set buildless_found 0

foreach arg $args {
  if {[string match --help $arg]} {
    puts "Welcome, Here flags available:\n1) -- --buildless -> used to reinstall code without build canisters\n2) -- --network=ic -> used to install modules on ic network\n3) -- --network=local -> used to install modules on local replica"
    exit 0
  }

  if {[string match --network=* $arg]} {
    set network [string range $arg 10 end]
  }

  if {[string match "--buildless" $arg] || [string match "buildless" $arg]} {
    set buildless_found 1
  }
}

if {[string match ic $network]} {
  # Changed git branch to main
  spawn git checkout main
  expect eof
  puts "Changed git branch to main"

  # Identity changed to cerotrade
  spawn dfx identity use cerotrade
  expect eof
  puts "Identity changed to cerotrade"

  # Get passphrase from environment and checkout
  if {[info exists env(INTERNET_IDENTITY_PASSPHRASE)]} {
    set passphrase $env(INTERNET_IDENTITY_PASSPHRASE)
  } else {
    # Request identity passphrase
    send_user "Please enter the passphrase for your identity: "
    expect_user -re "(.*)\n"
    set env(INTERNET_IDENTITY_PASSPHRASE) $expect_out(1,string)
    set passphrase $env(INTERNET_IDENTITY_PASSPHRASE)
  }
} else {
  # Identity changed to default
  spawn dfx identity use default
  expect eof
  puts "Identity changed to default"
}

proc expectPassphrase {passphrase} {
  expect {
    "Please enter the passphrase for your identity:" {
      send "$passphrase\r"
      exp_continue
    }
    eof
  }
}

set remnantsCanisters {statistics marketplace}
foreach canister $remnantsCanisters {
  if {!$buildless_found} {
    # Build canister
    puts "====-Build $canister canister-===="
    spawn dfx build $canister --network $network
    expectPassphrase $passphrase
  }

  # Reinstall canister
  puts "====-Reinstall $canister canister-===="
  spawn dfx canister install $canister --mode reinstall --network $network --yes
  expectPassphrase $passphrase
}

# Register wasm module into backend canisters
puts "====-Delete dynamic canisters-===="
set command "dfx canister call agent deleteDeployedCanister \"(null, null)\" --network $network"
spawn bash -c $command
expectPassphrase $passphrase