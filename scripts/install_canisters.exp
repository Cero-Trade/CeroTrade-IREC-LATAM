#!/usr/bin/expect -f

set timeout -1

# Initialize variables
set args [lrange $argv 0 end]
set network "local"
set mode "upgrade"
set passphrase ""
set backend_found 0
set modules_found 0

foreach arg $args {
  if {[string match --help $arg]} {
    puts "Welcome, these are the args available:\n1) backend -> used to install only backend canisters\n2) modules -> used to install dynamic canister wasm modules\n\nHere are the flags available:\n1) -- --backend -> used to install only backend canisters\n2) -- --modules -> used to install dynamic canister wasm modules\n3) -- --network=ic -> used to install canisters on ic network\n4) -- --network=local -> used to install canisters on local replica\n5) -- --mode=upgrade -> used to install canister code without losing data\n6) -- --mode=reinstall -> used to install canister code cleaning data"
    exit 0
  }

  if {[string match --network=* $arg]} {
    set network [string range $arg 10 end]
  }

  if {[string match --mode=* $arg]} {
    set mode [string range $arg 7 end]
  }

  if {[string match "--backend" $arg] || [string match "backend" $arg]} {
    set backend_found 1
  }

  if {[string match "--modules" $arg] || [string match "modules" $arg]} {
    set modules_found 1
  }
}

if {[string match ic $network]} {
  # Changed git branch to main
  spawn git checkout main
  expect eof
  puts "Changed git branch to main"

  # Identity changed to cerotrade
  spawn dfx identity use cerotrade
  expect eof
  puts "Identity changed to cerotrade"

  # Get passphrase from environment and checkout
  if {[info exists env(INTERNET_IDENTITY_PASSPHRASE)]} {
    set passphrase $env(INTERNET_IDENTITY_PASSPHRASE)
  } else {
    # Request identity passphrase
    send_user "Please enter the passphrase for your identity: "
    expect_user -re "(.*)\n"
    set env(INTERNET_IDENTITY_PASSPHRASE) $expect_out(1,string)
    set passphrase $env(INTERNET_IDENTITY_PASSPHRASE)
  }
} else {
  # Identity changed to default
  spawn dfx identity use default
  expect eof
  puts "Identity changed to default"
}

proc expectPassphrase {passphrase} {
  expect {
    "Please enter the passphrase for your identity:" {
      send "$passphrase\r"
      exp_continue
    }
    eof
  }
}

# Install canisters code
puts "====-Install canisters code-===="
set canisters {http_service user_index token_index transaction_index bucket_index marketplace statistics agent}

if {!$backend_found} {
  set canisters [linsert $canisters 0 "cero_trade_project_frontend"]
}

foreach canister $canisters {
  spawn dfx canister install $canister --mode $mode --network $network --yes
  expectPassphrase $passphrase
}

# Update canister controllers
puts "====-Update canister controllers-===="

# Redirect output to file
set command "dfx identity get-principal > principal.txt"
spawn bash -c $command
expectPassphrase $passphrase

# Read file content
set file_id [open "principal.txt" r]
set controller [string trim [read $file_id]]
close $file_id

# Delete file after read it
file delete "principal.txt"

set indexCanisters {agent token_index user_index transaction_index bucket_index}

foreach canister $indexCanisters {
  spawn dfx canister update-settings $canister --add-controller $controller --network $network
  expectPassphrase $passphrase
}

spawn dfx canister call agent registerControllers --network $network
expectPassphrase $passphrase

if {$modules_found} {
  # Register wasm module into backend canisters
  spawn npm run install-modules -- --network=$network
  expect eof
}